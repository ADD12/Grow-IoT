{"version":3,"file":"test-bundle.js","sources":["../test/setup/node.js","../lib/streams.js","../lib/api.js","../lib/connect.js","../lib/index.js","../test/unit/grow-test.js"],"sourcesContent":["global.expect = require('chai').expect;\n\n(function setup () {\n  beforeEach(function() {\n\n    // Setup test things\n    // In the future we can test multiple different kinds of things!\n    global.thing1 = {\n      'name': 'Light',\n      'description': 'An LED light with a basic on/off api.',\n      'state': 'off',\n      'actions': [\n        {\n          'name': 'On',\n          'description': 'Turns the light on.',\n          'id': 'turn_light_on',\n          'updateState': 'on',\n          'schedule': 'at 9:00am',\n          'event': 'Light turned on',\n          'function': function () {\n            return 'Light on.';\n          }\n        },\n        {\n          'name': 'off',\n          'id': 'turn_light_off',\n          'updateState': 'off',\n          'schedule': 'at 8:30pm',\n          'event': 'Light turned off',\n          'function': function () {\n            return 'Light off.';\n          }\n        }\n      ],\n      'events': [\n        {\n          'name': 'Light data',\n          'id': 'light_data',\n          'type': 'light',\n          'schedule': 'every 1 second',\n          'function': function () {\n            return 'data';\n          }\n        }\n      ]\n    };\n  });\n\n  afterEach(function() {\n    delete global.thing1;\n  });\n})();\n","// Documentation: https://nodejs.org/api/stream.html\nconst Readable = require('stream').Readable;\nconst Writable = require('stream').Writable;\n\nvar SetupStreams = function() {\n  // Readable Stream: this is \"readable\" from the server perspective.\n  // The device publishes it's data to the readable stream.\n  this.readableStream = new Readable({objectMode: true});\n\n  // We are pushing data when sensor measures it so we do not do anything\n  // when we get a request for more data. We just ignore it for now.\n  this.readableStream._read = function () {};\n\n  this.readableStream.on('error', function (error) {\n    console.log(\"Error\", error.message);\n  });\n\n  // Writable stream: this is writable from the server perspective. A device listens on\n  // the writable stream to recieve new commands.\n  this.writableStream = new Writable({objectMode: true});\n\n  return this;\n}\n\nexport default SetupStreams;\n\n\n// Pipes readable and writeable streams. ??????\n// GROWJS.prototype.pipeInstance = function () {\n//   var self = this;\n\n//   this.pipe(self.writableStream);\n//   self.readableStream.pipe(this);\n// };\n\n\n","\nvar API = {\n/**\n * Send data to Grow-IoT server.\n * @param      {Object}  data\n * @param      {Function} callback\n */\nsendData (data, callback) {\n  if (!this.ddpclient || !this.uuid || !this.token) {\n    callback(\"Invalid connection state.\");\n    return;\n  }\n\n  this.ddpclient.call(\n    'Device.sendData',\n    [{uuid: this.uuid, token: this.token}, data],\n    function (error, result) {\n      if (error) console.log(error);\n\n      if (!_.isUndefined(callback)) {\n        callback(null, result);\n      }\n    }\n  );\n},\n\n/**\n * Emit device event to Grow-IoT server.\n * @param      {Object}  event\n * @param      {Function} callback\n */\nemitEvent (eventMessage, callback) {\n  \n\n  var body = eventMessage;\n  body.timestamp = new Date();\n\n  this.ddpclient.call(\n    'Device.emitEvent',\n    [{uuid: this.uuid, token: this.token}, body],\n    function (error, result) {\n      if (!_.isUndefined(callback)) {\n        callback(error, result);\n      }\n    }\n  );\n},\n\n\n// TODO: split this into two functions... it sucks.\n/*\n * Update device property on Grow-IoT server.\n * @param {String} componentName  Name of the component you want to update.\n * @param {String} propertyKey  Name of the of the property you wish to update\n * @param {Object|List|String|Number|Boolean} value The new value to set the property to.\n * @param {Function} callback  An optional callback.\n */\nupdateProperty(componentName, propertyKey, value, callback) {\n  \n\n  var thing = this.config;\n\n  // Find properties in top level thing object\n  for (var key in thing) {\n    // Find properties in components \n    if (key === \"components\") {\n      for (var item in thing.components) {\n        if (thing.components[item].name === componentName) {\n          thing.components[item][propertyKey] = value;\n        }\n      }\n    } else if (thing[key] === componentName) {\n      thing[propertyKey] = value;\n    }\n  }\n\n  this.writeChangesToGrowFile();\n\n  this.ddpclient.call(\n    'Device.udpateProperty',\n    [{uuid: this.uuid, token: this.token}, componentName, propertyKey, value],\n    function (error, result) {\n      if (!_.isUndefined(callback)) {\n        callback(error, result);\n      }\n    }\n  );\n}\n\n\n}\n\nexport default API;\n","/*\nSSL is supported though will require a bit more setup. If you are hosting your instance off a computer with a dedicated IP address include the following info in your configuration object.\n\n```json\n    \"host\": \"YOUR_IP_HERE\",\n    \"port\": 443,\n    \"ssl\": true,\n```\n\nIf you are hosting on a cloud instance such as [Meteor Galaxy](https://galaxy.meteor.com), you might need specify the servername. The example below shows you how to connect securely to the instance at [grow.commongarden.org](https://grow.commongarden.org):\n\n```json\n    \"host\": \"grow.commongarden.org\",\n    \"tlsOpts\": {\n        \"tls\": {\n            \"servername\": \"galaxy.meteor.com\"\n        }\n    },\n    \"port\": 443,\n    \"ssl\": true,\n    \"thing\": { ... }\n```\n*/\n\nconst _ = require('underscore');\nconst DDPClient = require('ddp');\nconst EJSON = require(\"ddp-ejson\");\n\n\nvar DDP = {\n  connect (config, callback) {\n    this.ddpclient = new DDPClient(_.defaults(config, {\n      host: 'localhost',\n      port: 3000,\n      ssl: false,\n      maintainCollections: false\n    }));\n\n    this.ddpclient.connect(function (error, wasReconnect) {\n      if (error) return callback(error);\n\n      if (wasReconnect) {\n        console.log(\"Reestablishment of a Grow server connection.\");\n      }\n      else {\n        console.log(\"Grow server connection established.\");\n      }\n\n      if (this.uuid || this.token) {\n        return this._afterConnect(callback, {\n          uuid: this.uuid,\n          token: this.token\n        });\n      }\n\n      // console.log(JSON.stringify(this.config));\n\n      this.ddpclient.call(\n        'Device.register',\n        [this.config],\n        function (error, result) {\n          if (error) return callback(error);\n\n          assert(result.uuid, result);\n          assert(result.token, result);\n\n          this.uuid = result.uuid;\n          this.token = result.token;\n\n          this._afterConnect(callback, result);\n        }\n      );\n    });\n  },\n  \n  /*\n   * Runs imediately after a successful connection. Makes sure a UUID and token are set.\n   */\n  _afterConnect(callback, result) {\n\n    this.ddpclient.subscribe(\n      'Device.messages',\n      [{uuid: this.uuid, token: this.token}],\n      function (error) {\n        if (error) return callback(error);\n\n        if (!this._messageHandlerInstalled) {\n          this._messageHandlerInstalled = true;\n\n          this.ddpclient.on('message', function (data) {\n            data = EJSON.parse(data);\n\n            if (data.msg !== 'added' || data.collection !== 'Device.messages') {\n              return;\n            }\n\n            this.push(data.fields.body);\n          });\n        }\n      }\n    );\n\n    // Now check to see if we have a stored UUID.\n    // If no UUID is specified, store a new UUID.\n    if (_.isUndefined(this.config.uuid) || _.isUndefined(this.config.token)) {\n      this.config.uuid = result.uuid;\n      this.config.token = result.token;\n\n      this.writeChangesToGrowFile();\n    }\n\n \n    callback(null, result);\n  }\n};\n\nexport default DDP;\n","import Thing from 'Thing.js';\nimport SetupStreams from './streams'\nimport API from './api'\nimport DDP from './connect'\n\nconst _ = require('underscore');\nconst assert = require('assert');\nconst util = require('util');\nconst Duplex = require('stream').Duplex;\nconst fs = require('fs');\nconst RSVP = require('rsvp');\nconst later = require('later');\n\n// Use local time.\nlater.date.localTime();\n\nclass Grow {\n  // callAction: Actions.callAction,\n  constructor(config) {\n\n    this.thing = new Thing(config);\n    \n    // What does this do?\n    Duplex.call(this, _.defaults(this.thing, {objectMode: true, readableObjectMode: true, writableObjectMode: true}));\n\n    this.uuid = this.thing.uuid || null;\n    this.token = this.thing.token || null;\n\n    // Remove?\n    this._messageHandlerInstalled = false;\n\n\n    // TODO: test to make sure actions are registered even when there is no connection.\n    DDP.connect(function(error, data) {\n      if (error) {\n        console.log(error);\n\n        // TODO: register actions and make attempt to make reconnection.\n        // The idea is that if connection is lost the program shouldn't stop,\n        // but should also try to reconnect.\n      }\n\n      // // These should register reguardless of whether device connects.\n      // var actionsRegistered = new RSVP.Promise(function(resolve, reject) {\n      //   try {\n      //     resolve(self.registerActions(config));\n      //   }\n      //   catch (error) {\n      //     reject(error);\n      //   }\n      // });\n\n      // // These should register reguardless of whether device connects.\n      // var eventsRegistered = new RSVP.Promise(function(resolve, reject) {\n      //   try {\n      //     resolve(self.registerEvents(config));\n      //   }\n      //   catch (error) {\n      //     reject(error);\n      //   }\n      // });\n\n\n      // actionsRegistered.then(function(value) {\n      //   self.pipeInstance();\n\n      //   if (!_.isUndefined(callback)) {\n      //     callback(null, self);\n      //   }\n      // });\n    });\n  }\n\n  // On _write, call API.sendData()\n  _write(chunk, encoding, callback) {\n    API.sendData(chunk, callback);\n  }\n\n  /*\n   * We are pushing data to a stream as commands are arriving and are leaving\n     to the stream to buffer them. So we simply ignore requests for more data.\n   */\n  _read(size) {}\n};\n\nexport default Grow;\n","import Grow from '../../lib/index';\n\ndescribe('A feature test', () => {\n  beforeEach(() => {\n    global.testThing = new Grow(thing1);\n\n  });\n\n  it('should have been run once', () => {\n    // Ok we have Thing.js, now let's use it.\n    console.log(testThing);\n    // expect(thing.constructor).to.have.been.calledOnce;\n  });\n\n  // it('should have always returned hello', () => {\n  //   expect(Thing.constructor).to.have.always.returned('hello');\n  // });\n\n  afterEach(() => {\n    delete global.testThing;\n  });\n});\n"],"names":["_","assert"],"mappings":"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"}