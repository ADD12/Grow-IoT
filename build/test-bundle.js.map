{"version":3,"file":"test-bundle.js","sources":["../test/setup/node.js","../lib/index.js","../test/unit/grow-test.js"],"sourcesContent":["global.expect = require('chai').expect;\n\n(function setup () {\n  beforeEach(function() {\n\n    // Setup test things\n    // In the future we can test multiple different kinds of things!\n    global.thing1 = {\n      'name': 'Light',\n      'description': 'An LED light with a basic on/off api.',\n      'state': 'off',\n      'actions': [\n        {\n          'name': 'On',\n          'description': 'Turns the light on.',\n          'id': 'turn_light_on',\n          'updateState': 'on',\n          'schedule': 'at 9:00am',\n          'event': 'Light turned on',\n          'function': function () {\n            return 'Light on.';\n          }\n        },\n        {\n          'name': 'off',\n          'id': 'turn_light_off',\n          'updateState': 'off',\n          'schedule': 'at 8:30pm',\n          'event': 'Light turned off',\n          'function': function () {\n            return 'Light off.';\n          }\n        }\n      ],\n      'events': [\n        {\n          'name': 'Light data',\n          'id': 'light_data',\n          'type': 'light',\n          'schedule': 'every 1 second',\n          'function': function () {\n            return 'data';\n          }\n        }\n      ]\n    };\n  });\n\n  afterEach(function() {\n    delete global.thing1;\n  });\n})();\n","import Thing from 'Thing.js';\nimport writeChangesToState from './state'\n\nconst _ = require('underscore');\nconst assert = require('assert');\nconst util = require('util');\nconst Duplex = require('stream').Duplex;\nconst fs = require('fs');\nconst RSVP = require('rsvp');\nconst later = require('later');\nconst DDPClient = require('ddp');\nconst EJSON = require('ddp-ejson');\nconst Readable = require('stream').Readable;\nconst Writable = require('stream').Writable;\n\n// Use local time.\nlater.date.localTime();\n\n/**\n * Constructs a new grow instance, connects to the Grow-IoT server specified in the config\n   (default localhost:3000), registers the device with the Server (if it's the first time connecting it saves a new\n   uuid and token), and sets up readable and writable streams.\n * @constructor\n * @param {Object} config  \n * @param {Function} callback  An optional callback.\n * @return     A new grow instance.\n */\nclass Grow {\n  constructor(config, callback) {\n    this.thing = new Thing(config);\n    \n    Duplex.call(this, _.defaults(config, {objectMode: true, readableObjectMode: true, writableObjectMode: true}));\n\n    this._messageHandlerInstalled = false;\n\n    try {\n      // We need the methods defined in the config, so we _.extend state.json.\n      var state = require('./state.json');\n      _.extend(this, state);\n    } catch (err) {\n      this.uuid = this.thing.uuid || null;\n      this.token = this.thing.token || null;\n    }\n\n    this.ddpclient = new DDPClient(_.defaults(config, {\n      host: 'localhost',\n      port: 3000,\n      ssl: false,\n      maintainCollections: false\n    }));\n\n    this.ddpclient.connect((error, wasReconnect) => {\n      if (error) return callback(error);\n\n      if (wasReconnect) {\n        console.log('Reestablishment of a Grow server connection.');\n      } else {\n        console.log('Grow server connection established.');\n      }\n\n      if (this.uuid || this.token) {\n        return this._afterConnect(callback, {\n          uuid: this.uuid,\n          token: this.token\n        });\n      }\n\n      // console.log(JSON.stringify(this.config));\n      // Break this out\n      this.ddpclient.call(\n        'Device.register',\n        [config],\n        (error, result) => {\n          if (error) {\n            if (!_.isUndefined(callback)) {\n              return callback(error);\n            } else { console.log(error); }\n          }\n\n          assert(result.uuid, result);\n          assert(result.token, result);\n\n          this.uuid = result.uuid;\n          this.token = result.token;\n\n          this._afterConnect(callback, result);\n        }\n      );\n    });\n  }\n\n  /*\n  * Runs imediately after a successful connection. Makes sure a UUID and token are set.\n  */\n  _afterConnect(callback, result) {\n\n    this.ddpclient.subscribe(\n      'Device.messages',\n      [{uuid: this.uuid, token: this.token}],\n      (error) => {\n        if (error) return callback(error);\n\n        if (!this._messageHandlerInstalled) {\n          this._messageHandlerInstalled = true;\n\n          this.ddpclient.on('message', (data)=> {\n            data = EJSON.parse(data);\n\n            if (data.msg !== 'added' || data.collection !== 'Device.messages') {\n              return;\n            }\n\n            this.push(data.fields.body);\n          });\n        }\n      }\n    );\n\n    // Now check to see if we have a stored UUID.\n    // If no UUID is specified, store a new UUID.\n    if (_.isUndefined(this.uuid) || _.isUndefined(this.token)) {\n      this.config.uuid = result.uuid;\n      this.config.token = result.token;\n\n      // this.writeChangesToGrowFile();\n    }\n\n    // SETUP STREAMS\n    // Readable Stream: this is 'readable' from the server perspective.\n    // The device publishes it's data to the readable stream.\n    this.readableStream = new Readable({objectMode: true});\n\n    // We are pushing data when sensor measures it so we do not do anything\n    // when we get a request for more data. We just ignore it for now.\n    this.readableStream._read = function () {};\n\n    this.readableStream.on('error', function (error) {\n      console.log('Error', error.message);\n    });\n\n    // Writable stream: this is writable from the server perspective. A device listens on\n    // the writable stream to recieve new commands.\n    this.writableStream = new Writable({objectMode: true});\n\n    // These should register reguardless of whether device connects.\n    var actionsRegistered = new RSVP.Promise((resolve, reject) => {\n      try {\n        resolve(this.registerActions());\n      }\n      catch (error) {\n        reject(error);\n      }\n    });\n\n    actionsRegistered.then((value)=> {\n      this.pipe(this.writableStream);\n      this.readableStream.pipe(this);\n\n      if (!_.isUndefined(callback)) {\n        callback(null, self);\n      }\n    });\n  }\n\n  // On _write, call API.sendData()\n  _write(chunk, encoding, callback) {\n    this.sendData(chunk, callback);\n  }\n\n  /*\n   * We are pushing data to a stream as commands are arriving and are leaving\n     to the stream to buffer them. So we simply ignore requests for more data.\n   */\n  _read(size) {}\n\n  // TODO: rename? listenForActionsOnWritableStream?\n  registerActions() {\n    // When the action is called listen for event. The action should \n    // successfully return an event.\n    // Sets up listening for actions on the writeable stream.\n    this.writableStream._write = (command, encoding, callback) => {\n      if (command.options) {\n        this.thing.callAction(command.type, command.options);\n      } else {\n        this.thing.callAction(command.type);\n      }\n\n      callback(null);\n    };\n\n    // // Listen for action events and emit them as events to Grow-IoT.\n    // for (var action in this.thing.actions) {\n    //   console.log(action);\n    // }\n  }\n\n  /**\n   * Send data to Grow-IoT server.\n   * @param      {Object}  data\n   * @param      {Function} callback\n   */\n  sendData (data, callback) {\n    if (!this.ddpclient || !this.uuid || !this.token) {\n      callback('Invalid connection state.');\n      return;\n    }\n\n    this.ddpclient.call(\n      'Device.sendData',\n      [{uuid: this.uuid, token: this.token}, data],\n      function (error, result) {\n        if (error) console.log(error);\n\n        if (!_.isUndefined(callback)) {\n          callback(null, result);\n        }\n      }\n    );\n  }\n\n  // TODO: EMIT EVENT ONLY ONCE?\n  /**\n   * Emit device event to Grow-IoT server.\n   * @param      {Object}  event\n   * @param      {Function} callback\n   */\n  emitEvent (eventMessage, callback) {\n    var body = {\n      'message': eventMessage\n    };\n    body.timestamp = new Date();\n\n    this.ddpclient.call(\n      'Device.emitEvent',\n      [{uuid: this.uuid, token: this.token}, body],\n      function (error, result) {\n        if (!_.isUndefined(callback)) {\n          callback(error, result);\n        }\n      }\n    );\n  }\n\n  /*\n   * Update device property on Grow-IoT server.\n   * @param {String} componentName  Name of the component you want to update.\n   * @param {String} propertyKey  Name of the of the property you wish to update\n   * @param {Object|List|String|Number|Boolean} value The new value to set the property to.\n   * @param {Function} callback  An optional callback.\n   */\n  updateProperty(componentID, property, value, callback) {\n    // Update the thing property.\n    this.thing.updateProperty(componentID, property, value);\n\n    // this.writeChangesToGrowFile();\n\n    this.ddpclient.call(\n      'Device.udpateProperty',\n      [{uuid: this.uuid, token: this.token}, componentID, property, value],\n      function (error, result) {\n        if (!_.isUndefined(callback)) {\n          callback(error, result);\n        }\n      }\n    );\n  }\n};\n\nutil.inherits(Grow, Duplex);\n\nexport default Grow;\n","import Grow from '../../lib/index';\n\n/*\n  Basic tests:\n  * Events\n*/\n\ndescribe('A feature test', () => {\n  it('should have setup actions correctly', () => {\n    var GrowInstance = new Grow(thing1);\n    expect(GrowInstance.thing.callAction('turn_light_on')).to.equal('Light on.');\n    expect(GrowInstance.thing.callAction('turn_light_off')).to.equal('Light off.');\n  });\n\n  // TODO\n  // it('should have setup events correctly', () => {\n  //   var GrowInstance = new Grow(thing1);\n  //   // expect(thing.constructor).to.have.been.calledOnce;\n  // });\n\n});\n"],"names":["fs"],"mappings":"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"}