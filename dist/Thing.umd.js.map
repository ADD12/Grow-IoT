{"version":3,"file":"Thing.umd.js","sources":["../lib/Thing.js"],"sourcesContent":["const _ = require('underscore');\nconst later = require('later');\n// const EventEmitter = require('events');\nimport EventEmitter from 'events'\n\nclass Thing extends EventEmitter {\n  /**\n   * Constructs a new Thing object. A Thing is an extension of [node's built-in \n     EventEmitter class](https://nodejs.org/api/events.html).\n   * @param {Object} config a javascript object containing metadata, properties, events, and actions\n   * @return     A new thing object\n  */\n  constructor(config) {\n    super();\n\n    if (!config) {\n      throw new Error('Thing.js requires an config object.');\n    } else {\n      _.extend(this, config);\n    }\n\n    this.registerActions();\n    this.registerEvents();\n    this.registerProperties();\n  }\n\n  /**\n   * Starts any scheduled actions.\n   * Todo: should also throw errors if actions don't have IDs or functions.\n   */\n  registerActions () {\n    this.scheduledActions = [];\n\n    if (!_.isUndefined(this.actions)) {\n      _.each(this.actions, (action, key, list) => {\n        if (!_.isUndefined(action.schedule)) {\n          this.startAction(this.actions[key]);\n        }\n      });\n    }\n  }\n\n  /**\n   * Starts listeners and scheduled events.\n   * Todo: this needs better testing. IT IS ALSO NOT WORKING\n     WITH MORE THAN ONE EVENT...\n   */\n  registerEvents () {\n    this.scheduledEvents = [];\n\n    if (!_.isUndefined(this.events)) {\n      _.each(this.events, (event, key, list) => {\n\n        if (!_.isUndefined(event.schedule)) {\n          this.scheduleEvent(event);\n        }\n\n        if (!_.isUndefined(event.on)) {\n          this.on(event.on, () => {\n            event.function();\n          });\n        }\n      });\n    }\n  }\n\n  registerProperties () {\n    if (!_.isUndefined(this.properties)) {\n      for (var property in this.properties) {\n        // If the property is a function we initialize it.\n        if (typeof this.properties[property] === 'function') {\n          // Note this function should return property value.\n          this.properties[property] = this.properties[property]()\n        }\n      }\n    }\n  }\n\n  /**\n   * Get action object\n   * @param {String} ID  The key / id of the action object you want.\n   * @returns {Object}\n   */\n  getAction (ID) {\n    var action = {};\n    _.each(this.actions, (value, key, list) => {\n      if (key === ID) {\n        return action = value;\n      } else if (this.actions[key].id === ID) {\n        return action = value; \n      }\n    });\n\n    return action;\n  }\n\n  /**\n   * Get list of the Thing's actions\n   * @returns {Object}\n   */\n  getActions () {\n    return this.actions;\n  }  \n\n  /**\n   * Get event object\n   * @param {String} ID  The key / id of the event object you want.\n   * @returns {Object}\n   */\n  getEvent (ID) {\n    var event = {}\n    _.each(this.events, (value, key, list) => {\n      if (key === ID) {\n        return event = value;\n      } else if (this.events[key].id === ID) {\n        return event = value; \n      }\n    });\n\n    return event;\n  }\n\n  /**\n   * Get list of the Thing's events\n   * @returns {Object}\n   */\n  getActions () {\n    return this.events;\n  }  \n\n  /**\n   * Update a property based on a component ID.\n   * @param {String} componentID The id of the component to change the property of.\n   * @param {String} property The property of the component to be update.\n   * @param {String} value The value to update the property to.\n   */\n  // updateComponentProperty (componentID, property, value) {\n  //   var component = this.getEvent(componentID) || this.getAction(componentID) || this.getProperty(componentID);\n  //   return component[property] = value;\n  // }\n\n  /**\n   * Update a property based on a component ID.\n   * @param {String} property The property of the component to be update.\n   * @param {String} value The value to update the property to.\n   */\n  setProperty (property, value) {\n    return this.properties[property] = value;\n  }\n\n  /* Get a property by key.\n   * @param {String} property\n   * @returns {String} property value.\n   */\n  getProperty (property) {\n    return this.properties[property];\n  }\n\n  /* Get a Thing's properties\n   * @returns {Object}\n   */\n  getProperties () {\n    return this.properties;\n  }\n\n  /**\n   * Calls a registered action, emits event if the the action has an 'event'\n   * property defined. Updates the state if the action has an 'updateState'\n   * property specified.\n   * @param      {String}  actionId The id of the action to call.\n   * @param      {Object}  options Optional, options to call with the function.\n   */\n  callAction (actionId, options) {\n    try {\n      var action = this.getAction(actionId);\n\n      if (!_.isUndefined(options)) {\n        var output = action.function(options);\n      }\n      else {\n        var output = action.function();\n      }\n      this.emit(actionId);\n\n      // We return any returns of called functions for testing.\n      if (!_.isUndefined(output)) {\n        return output;\n      }\n    }\n    catch (error) {\n      // If there is an error we emit an error.\n      return this.emit('error', error);\n    }\n\n  }\n\n  /**\n   * Starts a reoccurring action if a schedule property is defined.\n   * @param {Object} action An action object.\n   */\n  startAction (action) {\n    var schedule = later.parse.text(action.schedule);\n    var scheduledAction = later.setInterval(()=> {this.callAction(action.id);}, schedule);\n    this.scheduledActions.push(scheduledAction);\n    return scheduledAction;\n  }\n\n  /**\n   * Starts a reoccurring event if a schedule property is defined.\n   * @param {Object} event An event object.\n   */\n  scheduleEvent (event) {\n    var schedule = later.parse.text(event.schedule);\n    var scheduledEvent = later.setInterval(()=> {this.callEvent(event.id);}, schedule);\n    this.scheduledEvents.push(scheduledEvent);\n    return scheduledEvent;\n  }\n};\n\nexport default Thing;\n"],"names":[],"mappings":"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"}